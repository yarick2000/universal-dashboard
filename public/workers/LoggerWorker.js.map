{
  "version": 3,
  "sources": ["../../src/workers/LoggerWorker/index.ts"],
  "sourcesContent": ["import { LoggerWorkerDisposeMessage, LoggerWorkerInitMessage, LoggerWorkerMessage } from './types';\r\n\r\nlet logBatch: unknown[] = [];\r\nlet idleTimer: NodeJS.Timeout | null = null;\r\nlet logToServerBatchSize = 10;\r\nlet logToServerIdleTimeSec = 5;\r\n\r\nconst sendBatch = () => {\r\n  if (logBatch.length > 0) {\r\n    postMessage(logBatch);\r\n    logBatch = [];\r\n  }\r\n  if (idleTimer) {\r\n    clearTimeout(idleTimer);\r\n    idleTimer = null;\r\n  }\r\n};\r\n\r\nconst addLogToBatch = (logData: unknown) => {\r\n  logBatch.push(logData);\r\n\r\n  // Send batch if size limit reached\r\n  if (logBatch.length >= logToServerBatchSize) {\r\n    sendBatch();\r\n    return;\r\n  }\r\n\r\n  // Reset idle timer\r\n  if (idleTimer) {\r\n    clearTimeout(idleTimer);\r\n  }\r\n  idleTimer = setTimeout(sendBatch, logToServerIdleTimeSec * 1000);\r\n};\r\n\r\nonmessage = (\r\n  event: MessageEvent<LoggerWorkerMessage<unknown> | LoggerWorkerInitMessage | LoggerWorkerDisposeMessage>,\r\n) => {\r\n  const { type } = event.data;\r\n  if (!type) {\r\n    addLogToBatch({\r\n      source: 'client',\r\n      level: 'error',\r\n      message: 'Logger worker missing type parameter',\r\n      timestamp: Date.now().valueOf(),\r\n      browserInfo: collectBrowserInfo(),\r\n    });\r\n    return;\r\n  }\r\n  if (type === 'dispose') {\r\n    sendBatch();\r\n    close();\r\n    return;\r\n  }\r\n\r\n  if (type === 'init') {\r\n    const { batchSize, idleTime }: LoggerWorkerInitMessage = event.data;\r\n    logToServerBatchSize = batchSize;\r\n    logToServerIdleTimeSec = idleTime;\r\n    return;\r\n  }\r\n  const { message, args }: LoggerWorkerMessage<unknown> = event.data;\r\n  addLogToBatch({\r\n    source: 'client',\r\n    level: type,\r\n    message,\r\n    args,\r\n    browserInfo: collectBrowserInfo(),\r\n    timestamp: Date.now().valueOf(),\r\n  });\r\n};\r\n\r\nfunction collectBrowserInfo() {\r\n  const browserInfo: Record<string, unknown> = {\r\n    userAgent: navigator.userAgent,\r\n    language: navigator.language,\r\n  };\r\n\r\n  // Feature detection for additional browser capabilities\r\n  if ('languages' in navigator) {\r\n    browserInfo.languages = navigator.languages;\r\n  }\r\n\r\n  if ('hardwareConcurrency' in navigator) {\r\n    browserInfo.hardwareConcurrency = navigator.hardwareConcurrency;\r\n  }\r\n\r\n  if ('deviceMemory' in navigator) {\r\n    browserInfo.deviceMemory = navigator.deviceMemory;\r\n  }\r\n\r\n  if ('cookieEnabled' in navigator) {\r\n    browserInfo.cookieEnabled = navigator.cookieEnabled;\r\n  }\r\n\r\n  if ('onLine' in navigator) {\r\n    browserInfo.onLine = navigator.onLine;\r\n  }\r\n\r\n  if ('webdriver' in navigator) {\r\n    browserInfo.webdriver = navigator.webdriver;\r\n  }\r\n\r\n  // Screen information\r\n  if (typeof screen !== 'undefined') {\r\n    browserInfo.screen = {\r\n      width: screen.width,\r\n      height: screen.height,\r\n      availWidth: screen.availWidth,\r\n      availHeight: screen.availHeight,\r\n      colorDepth: screen.colorDepth,\r\n      pixelDepth: screen.pixelDepth,\r\n    };\r\n  }\r\n\r\n  // Timezone\r\n  try {\r\n    browserInfo.timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n  } catch {\r\n    // Ignore if not supported\r\n  }\r\n\r\n  return browserInfo;\r\n}\r\n"],
  "mappings": ";;;AAEA,MAAI,WAAsB,CAAC;AAC3B,MAAI,YAAmC;AACvC,MAAI,uBAAuB;AAC3B,MAAI,yBAAyB;AAE7B,MAAM,YAAY,MAAM;AACtB,QAAI,SAAS,SAAS,GAAG;AACvB,kBAAY,QAAQ;AACpB,iBAAW,CAAC;AAAA,IACd;AACA,QAAI,WAAW;AACb,mBAAa,SAAS;AACtB,kBAAY;AAAA,IACd;AAAA,EACF;AAEA,MAAM,gBAAgB,CAAC,YAAqB;AAC1C,aAAS,KAAK,OAAO;AAGrB,QAAI,SAAS,UAAU,sBAAsB;AAC3C,gBAAU;AACV;AAAA,IACF;AAGA,QAAI,WAAW;AACb,mBAAa,SAAS;AAAA,IACxB;AACA,gBAAY,WAAW,WAAW,yBAAyB,GAAI;AAAA,EACjE;AAEA,cAAY,CACV,UACG;AACH,UAAM,EAAE,KAAK,IAAI,MAAM;AACvB,QAAI,CAAC,MAAM;AACT,oBAAc;AAAA,QACZ,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,SAAS;AAAA,QACT,WAAW,KAAK,IAAI,EAAE,QAAQ;AAAA,QAC9B,aAAa,mBAAmB;AAAA,MAClC,CAAC;AACD;AAAA,IACF;AACA,QAAI,SAAS,WAAW;AACtB,gBAAU;AACV,YAAM;AACN;AAAA,IACF;AAEA,QAAI,SAAS,QAAQ;AACnB,YAAM,EAAE,WAAW,SAAS,IAA6B,MAAM;AAC/D,6BAAuB;AACvB,+BAAyB;AACzB;AAAA,IACF;AACA,UAAM,EAAE,SAAS,KAAK,IAAkC,MAAM;AAC9D,kBAAc;AAAA,MACZ,QAAQ;AAAA,MACR,OAAO;AAAA,MACP;AAAA,MACA;AAAA,MACA,aAAa,mBAAmB;AAAA,MAChC,WAAW,KAAK,IAAI,EAAE,QAAQ;AAAA,IAChC,CAAC;AAAA,EACH;AAEA,WAAS,qBAAqB;AAC5B,UAAM,cAAuC;AAAA,MAC3C,WAAW,UAAU;AAAA,MACrB,UAAU,UAAU;AAAA,IACtB;AAGA,QAAI,eAAe,WAAW;AAC5B,kBAAY,YAAY,UAAU;AAAA,IACpC;AAEA,QAAI,yBAAyB,WAAW;AACtC,kBAAY,sBAAsB,UAAU;AAAA,IAC9C;AAEA,QAAI,kBAAkB,WAAW;AAC/B,kBAAY,eAAe,UAAU;AAAA,IACvC;AAEA,QAAI,mBAAmB,WAAW;AAChC,kBAAY,gBAAgB,UAAU;AAAA,IACxC;AAEA,QAAI,YAAY,WAAW;AACzB,kBAAY,SAAS,UAAU;AAAA,IACjC;AAEA,QAAI,eAAe,WAAW;AAC5B,kBAAY,YAAY,UAAU;AAAA,IACpC;AAGA,QAAI,OAAO,WAAW,aAAa;AACjC,kBAAY,SAAS;AAAA,QACnB,OAAO,OAAO;AAAA,QACd,QAAQ,OAAO;AAAA,QACf,YAAY,OAAO;AAAA,QACnB,aAAa,OAAO;AAAA,QACpB,YAAY,OAAO;AAAA,QACnB,YAAY,OAAO;AAAA,MACrB;AAAA,IACF;AAGA,QAAI;AACF,kBAAY,WAAW,KAAK,eAAe,EAAE,gBAAgB,EAAE;AAAA,IACjE,QAAQ;AAAA,IAER;AAEA,WAAO;AAAA,EACT;",
  "names": []
}
